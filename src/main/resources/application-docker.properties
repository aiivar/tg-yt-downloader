# Docker-specific configuration
spring.application.name=tg-yt-downloader

# Database configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://db:5432/tg_yt_downloader}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Server configuration
server.port=8080
server.address=0.0.0.0

# Logging configuration
logging.level.root=INFO
logging.level.ru.aiivar.tg.yt.downloader=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Custom health check endpoint available at /api/video/health

# Telegram Bot Configuration
telegram.bot.token=${TELEGRAM_BOT_TOKEN:YOUR_BOT_TOKEN_HERE}
telegram.chat.id=${TELEGRAM_CHAT_ID:YOUR_CHAT_ID_HERE}

# Telegram Bot API Server Configuration
telegram.api.use.local=${TELEGRAM_API_USE_LOCAL:false}
telegram.api.local.url=${TELEGRAM_API_LOCAL_URL:http://localhost:8081}
telegram.api.local.credentials.path=${TELEGRAM_API_LOCAL_CREDENTIALS_PATH:/path/to/credentials.json}

# Logging configuration for Telegram service
logging.level.ru.aiivar.tg.yt.downloader.service.TelegramFileService=DEBUG
